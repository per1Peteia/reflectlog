// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: clips.sql

package database

import (
	"context"
)

const createClip = `-- name: createClip :one
INSERT INTO clips (id, created_at, updated_at, clip_text, clip_brief, clip_title)
    VALUES (gen_random_uuid (), now(), now(), $1, $2, $3)
RETURNING
    id, created_at, updated_at, clip_text, clip_brief, clip_title
`

type createClipParams struct {
	ClipText  string
	ClipBrief string
	ClipTitle string
}

func (q *Queries) createClip(ctx context.Context, arg createClipParams) (Clip, error) {
	row := q.db.QueryRowContext(ctx, createClip, arg.ClipText, arg.ClipBrief, arg.ClipTitle)
	var i Clip
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClipText,
		&i.ClipBrief,
		&i.ClipTitle,
	)
	return i, err
}

const getClips = `-- name: getClips :many
SELECT
    id, created_at, updated_at, clip_text, clip_brief, clip_title
FROM
    clips
ORDER BY
    created_at ASC
`

func (q *Queries) getClips(ctx context.Context) ([]Clip, error) {
	rows, err := q.db.QueryContext(ctx, getClips)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Clip
	for rows.Next() {
		var i Clip
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClipText,
			&i.ClipBrief,
			&i.ClipTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
